name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    env:
      NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine release metadata
        id: release_meta
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TAG="${{ inputs.tag }}"
          else
            TAG="${GITHUB_REF#refs/tags/}"
          fi
          if [ -z "$TAG" ]; then
            echo "Release tag could not be determined." >&2
            exit 1
          fi
          VERSION=$(node -p "require('./package.json').version")
          if [ "${TAG#v}" != "$VERSION" ]; then
            echo "Tag $TAG does not match package version $VERSION" >&2
            exit 1
          fi
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Test
        run: npm run test:ci

      - name: Build
        run: npm run build

      - name: Verify publish package contents
        run: npm pack --dry-run

      - name: Publish to npm
        if: env.NODE_AUTH_TOKEN != ''
        run: npm publish --access public

      - name: Create GitHub release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.release_meta.outputs.tag }}
          release_name: Genara v${{ steps.release_meta.outputs.version }}
          draft: false
          prerelease: false

      - name: Upload release artifact
        run: |
          TARBALL=$(npm pack --pack-destination ./release-artifacts)
          echo "tarball=$TARBALL" >> "$GITHUB_OUTPUT"
        id: package_artifact

      - name: Attach npm package tarball
        if: steps.package_artifact.outputs.tarball
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release-artifacts/${{ steps.package_artifact.outputs.tarball }}
          asset_name: ${{ steps.package_artifact.outputs.tarball }}
          asset_content_type: application/gzip
